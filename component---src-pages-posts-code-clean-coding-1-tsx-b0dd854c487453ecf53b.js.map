{"version":3,"file":"component---src-pages-posts-code-clean-coding-1-tsx-b0dd854c487453ecf53b.js","mappings":"sNAKA,MAwHaA,EAAOA,IAAMC,EAAAA,cAAA,aAAO,8BAEjC,UA1HqBC,IAEjBD,EAAAA,cAACE,EAAAA,EAAI,CAACC,UAAU,cAAcC,IAAI,eAAeC,KAAK,WAAWC,SAAS,qBACxEN,EAAAA,cAACO,EAAAA,EAAW,CACVC,IAAI,yCACJC,IAAI,WACJC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,eAAgB,UAAWC,iBAAkB,aAAcC,YAAAC,EAAA,QAErGhB,EAAAA,cAACiB,EAAAA,GAAgB,KACfjB,EAAAA,cAAA,UAAI,MACJA,EAAAA,cAAA,SAAG,2EAIHA,EAAAA,cAAA,SAAG,+BACHA,EAAAA,cAAA,SAAG,yFAIHA,EAAAA,cAAA,SAAG,yDACHA,EAAAA,cAAA,SAAG,2CACHA,EAAAA,cAAA,SAAG,mBAEHA,EAAAA,cAAA,UAAI,MACJA,EAAAA,cAAA,SAAG,uBACHA,EAAAA,cAAA,WACEA,EAAAA,cAAA,iDAMFA,EAAAA,cAAA,SAAG,4DACHA,EAAAA,cAAA,SAAG,OACHA,EAAAA,cAAA,SAAG,yDACHA,EAAAA,cAAA,WACEA,EAAAA,cAAA,yCAMFA,EAAAA,cAAA,SAAG,SACHA,EAAAA,cAAA,WACEA,EAAAA,cAAA,yCAMFA,EAAAA,cAAA,SAAG,aACHA,EAAAA,cAAA,SAAG,MACHA,EAAAA,cAAA,SAAG,gEACHA,EAAAA,cAAA,SAAG,yEAIHA,EAAAA,cAAA,UAAI,eACJA,EAAAA,cAAA,WACEA,EAAAA,cAAA,kMAaFA,EAAAA,cAAA,UAAI,SACJA,EAAAA,cAAA,WACEA,EAAAA,cAAA,kNAeFA,EAAAA,cAAA,UAAI,mCACJA,EAAAA,cAAA,WACEA,EAAAA,cAAA,oRAoBFA,EAAAA,cAAA,UAAI,qBAEJA,EAAAA,cAAA,UAAI,eACJA,EAAAA,cAAA,SAAG,kD,4GCpHX,MAAMkB,EAAcC,EAAAA,QAAOC,QAAOC,WAAA,CAAAC,YAAA,qBAAAC,YAAA,eAAdJ,CAAc,8QAuB5BK,EAAmBL,EAAAA,QAAOM,IAAGJ,WAAA,CAAAC,YAAA,0BAAAC,YAAA,eAAVJ,CAAU,yBAI7BO,GAAeP,EAAAA,EAAAA,SAAOF,EAAAA,IAAWI,WAAA,CAAAC,YAAA,sBAAAC,YAAA,eAAlBJ,CAAkB,qECKvC,MArBaQ,IAAkF,IAAjF,UAAExB,EAAS,IAAEC,EAAG,KAAEC,EAAI,SAAEC,EAAQ,SAAEsB,GAAyCD,EACvF,MAAME,EAAgBC,EAAAA,SAASC,QAAQH,GAEvC,OACE5B,EAAAA,cAACgC,EAAAA,EAAS,KACRhC,EAAAA,cAACiC,EAAAA,EAAO,CAACC,UAAU,IACnBlC,EAAAA,cAACmC,EAAa,KACZnC,EAAAA,cAAA,WACEA,EAAAA,cAACmC,EAAkB,KACjBnC,EAAAA,cAACiB,EAAAA,GAAW,KAAEd,GACdH,EAAAA,cAAA,SAAG,IAAEI,EAAI,MAAIC,IAEdwB,EAAc,GACf7B,EAAAA,cAACmC,EAAc,KAAE7B,IAElBuB,EAAc,IAEP,C","sources":["webpack://eonseok-github-pages/./src/pages/posts/code/clean-coding/1.tsx","webpack://eonseok-github-pages/./src/templates/Post/style.ts","webpack://eonseok-github-pages/./src/templates/Post/index.tsx"],"sourcesContent":["import React from 'react';\nimport { StaticImage } from 'gatsby-plugin-image';\nimport Post from '@templates/Post';\nimport * as R from '@templates/ReusableCSS';\n\nconst CleanCoding1 = () => {\n  return (\n    <Post mainTitle=\"if else문 지양\" tag=\"Clean-coding\" date=\"23.08.11\" subTitle=\"if-else 분기문을 지양하자\">\n      <StaticImage\n        src=\"../../../../assets/imgs/no-image/1.png\"\n        alt=\"post-img\"\n        style={{ width: '100%', height: '60vh', backgroundSize: 'contain', backgroundRepeat: 'no-repeat' }}\n      />\n      <R.PostContentBox>\n        <h2>서론</h2>\n        <p>\n          umc 활동 중, 같이 코드를 짜는 한 팀원이 내 코드에 대한 피드백을 주었다 내용은 else 대신에 if로 수정하자는\n          것이었다\n        </p>\n        <p>처음 그 얘기를 들었을 때는 차이가 있나? 싶었다</p>\n        <p>\n          사실 난 코드를 작성할 때 항상, if문으로만 하기 보다는 꼭 if-else if-else를 사용했었다 그래야 뭔가 같은 그룹\n          처럼 보인다고 할까나,,?\n        </p>\n        <p>아무튼 그 얘기를 듣고 왜 사용을 지양해야 하는지 궁금해졌고, 이에 대한 내용을 구글링 해보았다</p>\n        <p>들어가기 앞서, 이런 정보를 알려준 팀원에게 감사의 인사를 보낸다 :)</p>\n        <p>(감사합니다 🙇🏻‍♂️)</p>\n\n        <h2>본론</h2>\n        <p>핵심은 가독성을 떨어트린다는 거였다</p>\n        <pre>\n          <code>\n            {`\nelse { return 1; }\n          `}\n          </code>\n        </pre>\n        <p>이런 식으로 작성이 되어 있으면, 이게 무엇 때문에 1이 return 되는지 파악하기 어렵다는 것이다</p>\n        <p>띠용~</p>\n        <p>게다가 else if는 else문 처리하고, if문 처리하는 거라, 2번의 처리가 발생하게 된다</p>\n        <pre>\n          <code>\n            {`\nelse if {}\n          `}\n          </code>\n        </pre>\n        <p>이는 곧,</p>\n        <pre>\n          <code>\n            {`\nelse { if {} }\n      `}\n          </code>\n        </pre>\n        <p>이와 같은 것이다</p>\n        <p>😦</p>\n        <p>따라서, else와 else if를 쓰기 보다는 if로 작성을 하고, 바로바로 return 시키는 것이 좋다</p>\n        <p>\n          물론 if문이 너무 많아지면, switch문을 사용하는 것이 좋다 (조건이 많을 때는 성능이 switch가 더 좋다고 한다)\n        </p>\n\n        <h3>includes 활용</h3>\n        <pre>\n          <code>\n            {`\nif (fruit === \"apple\" || fruit === \"banana\") {\n}\n// bad\n\nconst fruits = [\"apple\", \"banana\"];\nif (fruits.includes(fruit)) {\n} // 여기서 fruit은 동적으로 받는 값\n// good\n          `}\n          </code>\n        </pre>\n        <h3>중첩 지양</h3>\n        <pre>\n          <code>\n            {`\nif (fruits.includes(fruit) {\n  console.log('yes');\n\n  if (count > 10) {}\n// bad 😨\n\nif (!fruits.includes(fruit) return ;\nconsole.log('yes');\nif (count > 10) {}\n// good 🥳\n          `}\n          </code>\n        </pre>\n        <h3>switch 보단 map이나 객체 literal 사용하기</h3>\n        <pre>\n          <code>\n            {`\nswitch (color) {\n  case 'red'\n    return [1, 2];\n  case 'yellow'\n    return [3, 4];\n  default\n    return [];\n// bad\n\nconst colors = {\n  red: [1, 2],\n  yellow: [3, 4]\n}\nreturn colors[color] || []; // 여기서 color는 red or yellow\n// good\n          `}\n          </code>\n        </pre>\n        <h3>some이나 every 이용하기</h3>\n\n        <h3>삼향 연산자 이용하기</h3>\n        <p>일단 지금은 너무 피곤해서 여기까지만 하고 나중에 추가로 정리해서 올려야겠다,,!</p>\n      </R.PostContentBox>\n    </Post>\n  );\n};\n\nexport const Head = () => <title>clean-coding - if else문 지양</title>;\n\nexport default CleanCoding1;\n","import styled from 'styled-components';\nimport * as R from '../ReusableCSS';\n\nconst PostArticle = styled.article`\n  max-width: 120rem;\n  margin: 8rem auto 0;\n  padding: 7%;\n\n  &::-webkit-scrollbar {\n    display: visible; /* Chrome, Safari, Opera*/\n  }\n\n  pre {\n    display: inline-block;\n    width: 100%;\n    overflow: auto;\n    margin: 2rem 0;\n    padding: 0.1rem 2rem;\n    border-radius: 1rem;\n    font-size: 1.2rem;\n    color: #fff;\n    background-color: #222;\n    border: 0.1rem solid #666;\n  }\n`;\n\nconst PostMainTitleBox = styled.div`\n  margin-bottom: 2rem;\n`;\n\nconst PostSubTitle = styled(R.SubTitle)`\n  padding: 2rem 0;\n  font-weight: 500;\n  border-bottom: 0.1rem solid #ddd;\n`;\n\nexport { PostArticle, PostMainTitleBox, PostSubTitle };\n","import React, { Children, PropsWithChildren } from 'react';\nimport GlobalCSS from '@layouts/GlobalCSS';\nimport MainNav from '@layouts/MainNav';\nimport * as S from './style';\nimport * as R from '../ReusableCSS';\n\ninterface IPostProps { \n  mainTitle: string;\n  tag: string;\n  date: string;\n  subTitle: string;\n}\n\n/** Post 상세 페이지 template */\nconst Post = ({ mainTitle, tag, date, subTitle, children }: PropsWithChildren<IPostProps>) => {\n  const childrenArray = Children.toArray(children);\n\n  return (\n    <GlobalCSS>\n      <MainNav isSticky={true} />\n      <S.PostArticle>\n        <div>\n          <S.PostMainTitleBox>\n            <R.MainTitle>{mainTitle}</R.MainTitle>\n            <p>@{tag} / {date}</p>\n          </S.PostMainTitleBox>\n          {childrenArray[0]}\n          <S.PostSubTitle>{subTitle}</S.PostSubTitle>\n        </div>\n        {childrenArray[1]}\n      </S.PostArticle>\n    </GlobalCSS>\n  );\n};\n\nexport default Post;"],"names":["Head","React","CleanCoding1","Post","mainTitle","tag","date","subTitle","StaticImage","src","alt","style","width","height","backgroundSize","backgroundRepeat","__imageData","require","R","PostArticle","styled","article","withConfig","displayName","componentId","PostMainTitleBox","div","PostSubTitle","_ref","children","childrenArray","Children","toArray","GlobalCSS","MainNav","isSticky","S"],"sourceRoot":""}