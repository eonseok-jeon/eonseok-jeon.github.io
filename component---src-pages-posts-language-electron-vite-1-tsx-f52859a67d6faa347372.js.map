{"version":3,"file":"component---src-pages-posts-language-electron-vite-1-tsx-f52859a67d6faa347372.js","mappings":"qNAKA,MAqJaA,EAAOA,IAAMC,EAAAA,cAAA,aAAO,iCAEjC,UAvJsBC,IAElBD,EAAAA,cAACE,EAAAA,EAAI,CACHC,UAAU,gBACVC,IAAI,gBACJC,KAAK,WACLC,SAAS,0CAETN,EAAAA,cAACO,EAAAA,EAAW,CAACC,IAAI,oCAAoCC,IAAI,WACvDC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,eAAgB,UAAWC,iBAAkB,aAAcC,QAAA,+YACrGf,EAAAA,cAACgB,EAAAA,GAAgB,KACfhB,EAAAA,cAAA,UAAI,YAEJA,EAAAA,cAAA,SAAG,+DACHA,EAAAA,cAAA,SAAG,kEACHA,EAAAA,cAAA,SAAG,qBACHA,EAAAA,cAAA,SAAG,mCACHA,EAAAA,cAAA,WACAA,EAAAA,cAAA,SAAG,UACHA,EAAAA,cAAA,SAAG,qBACHA,EAAAA,cAAA,WACAA,EAAAA,cAAA,SAAG,2GACHA,EAAAA,cAAA,WACAA,EAAAA,cAAA,SAAG,UACHA,EAAAA,cAAA,WACAA,EAAAA,cAAA,SAAG,wCACHA,EAAAA,cAAA,WACAA,EAAAA,cAAA,SAAG,0BAEHA,EAAAA,cAAA,UAAI,SAEJA,EAAAA,cAAA,SAAG,sCACHA,EAAAA,cAAA,SAAG,qBACHA,EAAAA,cAAA,SAAG,eAEHA,EAAAA,cAAA,kBAAY,6BAEZA,EAAAA,cAAA,SAAG,KAEHA,EAAAA,cAAA,UAAI,MAEJA,EAAAA,cAAA,SAAG,4EACHA,EAAAA,cAAA,SAAG,4GACHA,EAAAA,cAAA,SAAG,gDACHA,EAAAA,cAAA,WACAA,EAAAA,cAAA,SAAG,SAEHA,EAAAA,cAAA,kBAAY,qCAEZA,EAAAA,cAAA,SAAG,UACHA,EAAAA,cAAA,WACAA,EAAAA,cAAA,SAAG,qDACHA,EAAAA,cAAA,WACAA,EAAAA,cAAA,SAAG,8CACHA,EAAAA,cAAA,SAAG,kBACHA,EAAAA,cAAA,WACAA,EAAAA,cAAA,SAAG,oCAEHA,EAAAA,cAAA,WACEA,EAAAA,cAAA,+1BA8BI,0CAGNA,EAAAA,cAAA,WACEA,EAAAA,cAAA,2wCA+CI,yC,2GC9Id,MAAMiB,EAAcC,EAAAA,QAAOC,QAAOC,WAAA,CAAAC,YAAA,qBAAAC,YAAA,eAAdJ,CAAc,8QAsB5BK,EAAmBL,EAAAA,QAAOM,IAAGJ,WAAA,CAAAC,YAAA,0BAAAC,YAAA,eAAVJ,CAAU,yBAI7BO,GAAeP,EAAAA,EAAAA,SAAOF,EAAAA,IAAWI,WAAA,CAAAC,YAAA,sBAAAC,YAAA,eAAlBJ,CAAkB,oECMvC,MArBaQ,IAAkF,IAAjF,UAAEvB,EAAS,IAAEC,EAAG,KAAEC,EAAI,SAAEC,EAAQ,SAAEqB,GAAyCD,EACvF,MAAME,EAAgBC,EAAAA,SAASC,QAAQH,GAEvC,OACE3B,EAAAA,cAAC+B,EAAAA,EAAS,KACR/B,EAAAA,cAACgC,EAAAA,EAAO,CAACC,UAAU,IACnBjC,EAAAA,cAACkC,EAAa,KACZlC,EAAAA,cAAA,WACEA,EAAAA,cAACkC,EAAkB,KACjBlC,EAAAA,cAACgB,EAAAA,GAAW,KAAEb,GACdH,EAAAA,cAAA,SAAG,IAAEI,EAAI,MAAIC,IAEduB,EAAc,GACf5B,EAAAA,cAACkC,EAAc,KAAE5B,IAElBsB,EAAc,IAEP,C","sources":["webpack://eonseok-github-pages/./src/pages/posts/language/electron-vite/1.tsx","webpack://eonseok-github-pages/./src/templates/Post/style.ts","webpack://eonseok-github-pages/./src/templates/Post/index.tsx"],"sourcesContent":["import React from 'react';\nimport { StaticImage } from 'gatsby-plugin-image';\nimport Post from '@templates/Post';\nimport * as R from '@templates/ReusableCSS';\n\nconst ElectronVite1 = () => {\n  return (\n    <Post \n      mainTitle=\"alias path 설정\"\n      tag=\"Electron-vite\"\n      date=\"23.08.11\"\n      subTitle=\"electron-vite with react 초기 alias 설정하기\"\n    >\n      <StaticImage src=\"../../../assets/imgs/review/1.png\" alt=\"post-img\" \n        style={{ width: '100%', height: '60vh', backgroundSize: 'contain', backgroundRepeat: 'no-repeat' }} />\n      <R.PostContentBox>\n        <h2>외 않 되 ?!</h2>\n\n        <p>회사에서 electron-vite를 이용하여, 데스크탑 어플리케이션을 만드니까, 초기 세팅을 하라고 하였다</p>\n        <p>이전에 프로젝트 진행하면서 이미 초기 세팅 마스터(?) 했기 때문에 굉장히 easy한 작업이겠구만 생각을 했다 </p>\n        <p>(후후,, 맡겨만 주시죠?😎)</p>\n        <p>전에 했던 프로젝트 코드 참고하면서, 고대로 복붙을 했다</p>\n        <br />\n        <p>결과는 실패</p>\n        <p>똑같이 복붙했는데 왜 안돼,,,</p>\n        <br />\n        <p>vite를 이용하니, vite.config.ts에 alias 설정해주고, tsconfig.json에 path 똑같이 설정해줬는데 해당 경로를 import 하려고 하니 계속 빨간줄이 떴다</p>\n        <br />\n        <p>🤯🤯🤯</p>\n        <br />\n        <p>계속 구글링하고, 다른 점이 있나 비교하고 했지만 계속 실파이,,</p>\n        <br />\n        <p>서터레스 받아서 머리 다 뽑아버렸다 🤡</p>\n        \n        <h2>HELP!</h2>\n        \n        <p>이대로 가다간 탈모 올 거 같아서 사수님께 헬프 요청을 하였다</p>\n        <p>1분도 안 돼서 바로 해결,,,</p>\n        <p>사라진 내 n시간,,</p>\n        \n        <blockquote>오늘의 결론: 모르겠으면 바로 물어보쟈! 😋</blockquote>\n        \n        <p>끝</p>\n        \n        <h2>원인</h2>\n        \n        <p>전에 했던 프로젝트는 react-vite를 이용하였고, 그렇기에, vite.config.ts 파일을 이용하여 환경 설정을 해주었다</p>\n        <p>하지만 얘는 react-vite가 아닌 electron-vite이므로 vite.config.ts가 아니라, electron.vite.config.ts란 파일에 설정을 해주어야 했다,,!!</p>\n        <p>난 그런 줄도 모르고, vite.config.ts가 없어서 새로 만들어줬는데,,</p>\n        <br />\n        <p>사수님 왈</p>\n        \n        <blockquote>초기 보일러 플레이트에 없는 파일은 굳이 만드실 필요 없어요</blockquote>\n        \n        <p>명언이다,,</p>\n        <br />\n        <p>tsconfig.json 파일 또한, tsconfig.web.json 을 이용했어야 했다</p>\n        <br />\n        <p>실제로 각 파일들 들어가보니, alias랑 path가 몇 개 설정되어 있었다</p>\n        <p>왜 확인을 안 했었을까,,</p>\n        <br />\n        <p>tsconfig.web.json을 아래와 같이 설정해주고,</p>\n        \n        <pre>\n          <code>\n            {`\n{\n  \"extends\": \"@electron-toolkit/tsconfig/tsconfig.web.json\",\n  \"include\": [\n    \"src/renderer/src/env.d.ts\",\n    \"src/renderer/src/**/*\",\n    \"src/renderer/src/**/*.tsx\",\n    \"src/preload/*.d.ts\"\n  ],\n  \"compilerOptions\": {\n    \"composite\": true,\n    \"jsx\": \"react-jsx\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"renderer/*\": [\"src/renderer/src/*\"],\n      \"styles/*\": [\"src/renderer/src/styles/*\"],\n      \"@Types/*\": [\"src/renderer/src/@Types/*\"],\n      \"apis/*\": [\"src/renderer/src/apis/*\"],\n      \"assets/*\": [\"src/renderer/src/assets/*\"],\n      \"components/*\": [\"src/renderer/src/components/*\"],\n      \"layouts/*\": [\"src/renderer/src/layouts/*\"],\n      \"pages/*\": [\"src/renderer/src/pages/*\"],\n      \"routes/*\": [\"src/renderer/src/routes/*\"],\n      \"store/*\": [\"src/renderer/src/store/*\"]\n    }\n  }\n}\n            `}\n          </code>\n        </pre>\n        electron.vite.config.ts를 아래와 같이 설정을 해주니\n        \n        <pre>\n          <code>\n            {`\nimport { resolve } from \"path\";\nimport { defineConfig, externalizeDepsPlugin } from \"electron-vite\";\nimport react from \"@vitejs/plugin-react\";\n\nexport default defineConfig({\n  main: {\n    plugins: [externalizeDepsPlugin()],\n  },\n  preload: {\n    plugins: [externalizeDepsPlugin()],\n  },\n  renderer: {\n    resolve: {\n      alias: {\n        renderer: resolve(\"src/renderer/src\"),\n        assets: resolve(\"src/renderer/src/assets\"),\n        components: resolve(\"src/renderer/src/components\"),\n        styles: resolve(\"src/renderer/src/styles\"),\n        contexts: resolve(\"src/renderer/src/contexts\"),\n        hooks: resolve(\"src/renderer/src/hooks\"),\n        layouts: resolve(\"src/renderer/src/layouts\"),\n        pages: resolve(\"src/renderer/src/pages\"),\n        routes: resolve(\"src/renderer/src/routes\"),\n        store: resolve(\"src/renderer/src/store\"),\n        utils: resolve(\"src/renderer/src/utils\"),\n      },\n    },\n    plugins: [react()],\n    define: {\n      \"process.env\": process.env,\n    },\n    css: {\n      preprocessorOptions: {\n        scss: {\n          additionalData: '\n          @use 'sass:math';\n          @import \"./src/renderer/src/styles/_global\";\n          ',\n        },\n      },\n    },\n  },\n});\n          `}\n          </code>\n        </pre>\n        잘 작동을 하였다!\n        \n        진짜 제발 초기 코드는 다 분석을 해보쟈,,!!\n      </R.PostContentBox>\n    </Post>\n  );\n};\n\nexport const Head = () => <title>electron-vite - alias path 설정</title>;\n\nexport default ElectronVite1;","import styled from 'styled-components';\nimport * as R from '../ReusableCSS';\n\nconst PostArticle = styled.article`\n  max-width: 120rem;\n  margin: 8rem auto 0 ;\n  padding: 13.2rem 10rem 7rem; \n\n  pre {\n    display: inline-block;\n    overflow: auto;\n    margin: 2rem 0;\n    padding: .1rem 2rem;\n    border-radius: 1rem;\n    font-size: 1.2rem;\n    color: #fff;\n    background-color: #222;\n    border: .1rem solid #666;\n\n    &::-webkit-scrollbar {\n      display: none; /* Chrome, Safari, Opera*/\n    }\n  }\n`;\n\nconst PostMainTitleBox = styled.div`\n  margin-bottom: 2rem;\n`;\n\nconst PostSubTitle = styled(R.SubTitle)`\n  padding: 2rem 0;\n  font-weight: 500;\n  border-bottom: .1rem solid #ddd;\n`;\n\nexport {\n  PostArticle,\n  PostMainTitleBox,\n  PostSubTitle\n};","import React, { Children, PropsWithChildren } from 'react';\nimport GlobalCSS from '@layouts/GlobalCSS';\nimport MainNav from '@layouts/MainNav';\nimport * as S from './style';\nimport * as R from '../ReusableCSS';\n\ninterface IPostProps { \n  mainTitle: string;\n  tag: string;\n  date: string;\n  subTitle: string;\n}\n\n/** Post 상세 페이지 template */\nconst Post = ({ mainTitle, tag, date, subTitle, children }: PropsWithChildren<IPostProps>) => {\n  const childrenArray = Children.toArray(children);\n\n  return (\n    <GlobalCSS>\n      <MainNav isSticky={true} />\n      <S.PostArticle>\n        <div>\n          <S.PostMainTitleBox>\n            <R.MainTitle>{mainTitle}</R.MainTitle>\n            <p>@{tag} / {date}</p>\n          </S.PostMainTitleBox>\n          {childrenArray[0]}\n          <S.PostSubTitle>{subTitle}</S.PostSubTitle>\n        </div>\n        {childrenArray[1]}\n      </S.PostArticle>\n    </GlobalCSS>\n  );\n};\n\nexport default Post;"],"names":["Head","React","ElectronVite1","Post","mainTitle","tag","date","subTitle","StaticImage","src","alt","style","width","height","backgroundSize","backgroundRepeat","__error","R","PostArticle","styled","article","withConfig","displayName","componentId","PostMainTitleBox","div","PostSubTitle","_ref","children","childrenArray","Children","toArray","GlobalCSS","MainNav","isSticky","S"],"sourceRoot":""}